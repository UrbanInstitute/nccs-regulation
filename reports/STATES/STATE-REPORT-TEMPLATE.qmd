---
format:
  html:
    toc: true
    toc-location: body
    toc_float: no
    toc-depth: 1
    embed-resources: true
    number-sections: true
    number-depth: 1
params:
  state:
    value: x
---

```{r, echo=F}
V1 <- 
c(AL = "Alabama", AK = "Alaska", AZ = "Arizona", AR = "Arkansas", 
CA = "California", CO = "Colorado", CT = "Connecticut", DE = "Delaware", 
FL = "Florida", GA = "Georgia", HI = "Hawaii", ID = "Idaho", 
IL = "Illinois", IN = "Indiana", IA = "Iowa", KS = "Kansas", 
KY = "Kentucky", LA = "Louisiana", ME = "Maine", MD = "Maryland", 
MA = "Massachusetts", MI = "Michigan", MN = "Minnesota", MS = "Mississippi", 
MO = "Missouri", MT = "Montana", NE = "Nebraska", NV = "Nevada", 
NH = "New Hampshire", NJ = "New Jersey", NM = "New Mexico", NY = "New York", 
NC = "North Carolina", ND = "North Dakota", OH = "Ohio", OK = "Oklahoma", 
OR = "Oregon", PA = "Pennsylvania", RI = "Rhode Island", SC = "South Carolina", 
SD = "South Dakota", TN = "Tennessee", TX = "Texas", UT = "Utah", 
VT = "Vermont", VA = "Virginia", WA = "Washington", DC = "Washington, D.C.", 
WV = "West Virginia", WI = "Wisconsin", WY = "Wyoming")

STATE.TITLE <- V1[[ params$state ]] |> toupper()
```

---
title:  "State of the Nonprofit Regulatory Environment in `r STATE.TITLE`"
---

```{r, eval=F, echo=F}
#########
#########  RENDERING REPORTS 
######### 


wd <- "C:/Users/jdlec/Dropbox (Personal)/00 - URBAN/legal-compendium/LC_Text_Data_Merge"
fn <- "ALL-STATES-FORMATTED.CSV"
templ <- "state-report-TEMPLATE.qmd"


setwd( wd )
setwd( "STATE" )

render_state_report <- function( STATE ){

  outfn <- paste0( "STATE/", STATE, ".html" )
  quarto::quarto_render(
  input = paste0( wd, "/", templ ),
  output_file = outfn,
  execute_params = list(
    state  = STATE ) )
}

STATE <-
c("AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", 
"HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", 
"MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", 
"NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", 
"UT", "VT", "VA", "WA", "DC", "WV", "WI", "WY")


df <- read.csv( paste0(wd,"/",fn) )
render_state_report( RULE="AK" )

purrr::walk( STATE, render_state_report )
```




```{r setup, include=FALSE}
knitr::opts_chunk$set( echo=FALSE, message=F, warning=F )
```



```{r, echo=F}
library( dplyr )
library( kableExtra )

wd <- "C:/Users/jdlec/Dropbox (Personal)/00 - URBAN/legal-compendium/LC_Text_Data_Merge"
fn <- "ALL-STATES-FORMATTED.CSV"

df <- read.csv( paste0( wd,"/",fn) )
```


```{r, echo=F}
# ST <- "AL"
# create_doc( "AL", df )

create_doc <- function( st, df ){
  # DFS = data frame for one state
  DFS <- dplyr::filter( df, state_abbr == st )
  purrr::walk( unique(DFS$reg_type), make_div1, DFS )
}


# type <- "ORGTYPE"
# dfs <- DFS
# make_div1( type, dfs )

make_div1 <- function( type, dfs )
{
  # DFST = data frame for state + type
  DFST  <- dplyr::filter( dfs, reg_type == type )
  label <- DFST$reg_type_label[1] 
  
  cat( "::: {.div1} \n\n" )
  cat( paste0( "# ", label, "\n\n" ) )
  cat( "::: \n\n" )
  
  purrr::walk( unique(DFST$reg_rule), make_div2, DFST )
  
}

# rule <- "SMALLO"
# dfst <- DFST
# make_div2( rule, dfst )

make_div2 <- function( rule, dfst )
{
  # df state + type + rule
  DFSTR  <- dplyr::filter( dfst, reg_rule == rule )
  ACT  <- DFSTR[[ "reg_action_label" ]] |> unique()
  BODY <- DFSTR[[ "reg_body_label" ]] |> unique()
  
  label <- DFSTR$reg_rule_label[1] 
  indicator <- DFSTR$reg_indicator[1]
  
  indicator <- ifelse( indicator %in% c("Yes","No"), indicator, "No" )
  
  reg.defined <- 
    ifelse( indicator == "Yes", 
            "YES: A regulation is defined in the state", 
            "A regulation is NOT defined in the state" )  

  
  cat( "::: {.div2} \n\n" )
  cat( paste0( "## ", label, "\n\n" ) )
  cat( paste0( "**Regulatory Action: ", toupper(ACT), "**\n\n" ) )
  # cat( paste0( "**Regulatory Body: ", toupper(BODY), "**\n\n" ) )
  cat( paste0( "**", reg.defined, "** \n\n" ) )
  cat( "::: \n\n" )
  
  purrr::walk( unique(DFSTR$ID), make_div3, DFSTR )
  
  cat( "\n\n" )
  
}


# id <- "AL-ORGTYPE-SMALLO-NS-001"
# dfstr <- DFSTR 
# make_div3( id, dfstr )

make_div3 <- function( id, dfstr )
{
  id_n <- substr( id, 22, 24 )
  # df state + type + rule + id
  D    <- dplyr::filter( dfstr, ID == id )
  CITE <- D[[ "code_univ_cite" ]]
  # ACT  <- D[[ "reg_action_label" ]]
  BODY <- D[[ "reg_body_label" ]]
  TXT  <- D[[ "code_text" ]]
  NOTE <- D[[ "notes" ]]
  
  no.cite <- ( CITE == "" | is.na(CITE) )
  no.note <- ( NOTE == "" | is.na(NOTE) )
  
  CITE2 <- substr( id, 4, 20 )
  CITE  <- ifelse( no.cite, CITE2, CITE )
  
  cat( "::: {.div3} \n\n" )
  cat( paste0( "### ", CITE, " \n\n" ) )
  cat( paste0( "**REGULATORY BODY:**  ", BODY, "\n\n" ) ) 
  if( ! no.cite )
  {
    cat( paste0( "**STATUTE TEXT:**  ", TXT, "\n\n" ) )
  }
  if( ! no.note )
  {
    cat( paste0( "**NOTES:**  ", NOTE, "\n\n" ) )
  }
  
  cat( "::: \n\n" )
}
```


```{r, echo=F, results="asis"}
wd <- "C:/Users/jdlec/Dropbox (Personal)/00 - URBAN/legal-compendium/LC_Text_Data_Merge"
fn <- "ALL-STATES-FORMATTED.CSV"
df <- read.csv( paste0( wd, "/", fn ) )

create_doc( st=params$state, df )
```



<br>
<hr>
<br>





<link href='https://fonts.googleapis.com/css?family=Fira Code' rel='stylesheet'> <link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Anonymous+Pro" />


```{css, echo=F}

@import url('https://fonts.cdnfonts.com/css/aharoni');


body {background-color: #EAE7DC;}

.title{ 
  \* color: #8E8D8A; *\
  color: black;
  font-weight: 800;
  font-size: 2.5em; }

.div1 h1 { 
  /* color: #8E8D8A;  */
  color: #5a6570;
  /* color: #E7717D;  */ 
  margin-top: 60px;
  font-size: 1.8em;
  text-transform: uppercase;
  font-family: 'Aharoni', sans-serif;
  /* font-family: Georgia, Times, "Times New Roman", serif; */ 
  font-weight: 800;  
  border-bottom:3px solid #C2B9B0; 
  width:100%;
}


h2#toc-title { color: #5a6570; }
  
h2.anchored { 
  font-size: 1.4em;
  font-weight: 800;
  margin-bottom: 10px;
  /*  color: #E98074;   */
  color: #5a6570;
  /*  color: #5072A7;   */
  /*  color: #5a6570;   */
  margin-top: 20px;
  /* font-family: "Lucida Console", "Menlo", "Monaco", "Courier", monospace; */
}

h3.anchored { 
  color: #E85A4F; 
  /* color: #AFD275;  */ 
  font-family: "Anonymous Pro";
  font-size: 1.3em;
  margin-top: 30px;
  margin-bottom: 20px;
}



img { margin-top: 40px;
      margin-bottom: 50px;}
      
#TOC {
   margin-top: 60px;
   font-size: 0.9em;
}

a { color: #5072A7; } 

p strong  { 
  color: #8E8D8A;
  font-size: 1.1em; }
 
blockquote p strong { color:#5a6570; }

.div2 p strong { color:#5a6570; }

.div3 p { color:#5a6570; }



 table{
   border-spacing:1px;
   margin-top:80px;
   margin-left: auto;
   margin-right: auto;
   align:center} 


 
td{ padding: 6px 10px 6px 10px;
    font-size:calc(0.7em + 0.25vw);
    font-family: "Lucida Console", "Menlo", "Monaco", "Courier", monospace;
} 

th{ text-align: left; } 



.parent {
  display: grid;
  grid-template-columns: repeat(1, 1fr);
  grid-template-rows: auto;  
  grid-column-gap: 20px;
  grid-row-gap: 10px;
  grid-template-areas:
    "a"
    "b"
    "c";
}


.div1 { 
  grid-area: a;
  padding-bottom: 15px;
}

.div2 { 
    grid-area: b;
    padding-left: 30px;
}

.div3 { 
    grid-area: c;
    padding-left: 50px;
}



h5 { font-size: 0.9em; }



.div3 p { 
    "Lucida Console", "Menlo", "Monaco", "Courier", monospace;
    font-size: 0.9em;
}



.div9 p { 
    font-family: "Anonymous Pro";
    font-size: 0.8em;
    color: gray;
    text-align: justify;
}

.div1 strong { 
    font-family: "Calibri", sans-serif;
    font-size: 1.6em;
    color: black;
}


.div4 table {
    margin-left: 20px;
    font-family: "Anonymous Pro";
}

.div5 td { 
    font-family: "Anonymous Pro";
    font-size: 0.9em;
}

.div6 td { 
    font-family: "Anonymous Pro";
    font-size: 0.9em;
}

.div7 td { 
    font-family: "Anonymous Pro";
    font-size: 0.9em;
}

.div12 td { 
    font-family: "Anonymous Pro";
    font-size: 0.9em;
}

.div13 td { 
    font-family: "Anonymous Pro";
    font-size: 0.9em;
}

.div14 td { 
    font-family: "Anonymous Pro";
    font-size: 0.9em;
}


.div5 table {
    margin-left: 20px;
}

.table>tbody {
    border-top: none;
}

.table>:not(caption)>*>* {
    padding: 0rem 0rem;
}

tbody, tfoot, tr, td, th {
    border-color: inherit;
    border-style: none; 
    border-width: 0;
}



@media print {
   body {
   display:table;
   table-layout:fixed;
   padding-top:2.5cm;
   padding-bottom:3cm;
   padding-left:1.5cm;
   padding-right:1.5cm;
   height:auto;
    }
}
```





